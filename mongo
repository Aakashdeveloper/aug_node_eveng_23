// First Download mongodb & install
///MongoCloud
https://cloud.mongodb.com/

Network Access > Add IP Address > 0.0.0.0/0
> Confirm

Database Access>Add New Database User >
Enter
Username  > test
autogenerate password >123HrI
> Built in role > Atlas Admin


Database >  Connect > Driver > NodeJs
mongodb+srv://<username>:<password>@cluster0.f8vmc.mongodb.net/?retryWrites=true&w=majority


mongodb+srv://test:123HrI@cluster0.f8vmc.mongodb.net/?retryWrites=true&w=majority

https://www.mongodb.com/try/download/community-kubernetes-operator

///
Create a folder by the name of data in C drive
C:\data

in data make folder by the name of db

C:\data\db


//Mac /linux
> open terminal
> mkdir data/db

Unstructured

Sql
RollNo | Hindi | English | Comp
  1    |  80   |         |  91
  2    |       |  90     |
  3    |  78   |         |
 

MongoDb
[
  {
    RollNo:1,
    Hindi:80,
    Comp:91
  },
  {
    RollNo:2,
    English:90
  },
  {
    RollNo:3,
    Hindi:78
  }
]


mongo       sql
database    database
collection  table
document    row
find        select
update      update
insert      insert
remove      delete

Mongo
> It can hold unstructed as well as structured form of data
> It is use for saving big amount of data
> Response time is faster as compare to sql
> Schemaless

Server
> Server should be running if you are using mongodb
> default port on which server is running is 27017

Client
> help to test our query
> only need for running query application do not need it


* Step to start mongo server
# window
// Step to start server
> Open cmd and go inside the bin folder
> c:/programfile/mongodb/server/5.0/bin
> mongod
This will start mongodb server on port 27017

# Mac/linux
> open terminal
> mongod --dbpath data/db


* Step to start mongo client
# window
> Open cmd and go inside the bin folder
> c:/programfile/mongodb/server/5.0/bin
> mongo

# mac
> open terminal
> mongo


/////////////
* check all the databases
> show dbs

* go inside db
> use dbname

* check all the collections
> show collections

* data inside the collection
> db.collectionName.find()


* To create new database
> use dbname


* to insert data
db.collection.insert()

db.user.insert({name:"Amit"})


* Find with condition
db.collection.find({condition})

db.products.find({category_id:1})


db.products.find({Color:'White'})


db.products.find({category_id:1,Color:'White'})


//projection
db.colname.find({condition},{projection})


db.restaurants.find({},{restaurant_name:1,cost:1,_id:0})

db.restaurants.find({state_id:1},{restaurant_name:1,address:1,cost:1,_id:0})


db.restaurants.find({"mealTypes.mealtype_id":1},{restaurant_name:1,mealTypes:1,cost:1,_id:0}).pretty()


db.restaurants.find({},{restaurant_name:1,address:1,cost:1,_id:0}).sort({cost:1})


db.restaurants.find({},{restaurant_name:1,address:1,cost:1,_id:0}).sort({cost:1}).skip(0).limit(3).pretty()

db.restaurants.find({},{restaurant_name:1,address:1,cost:1,_id:0}).sort({cost:1}).skip(3).limit(3).pretty()


db.restaurants.find({
  $and:[
    {"mealTypes.mealtype_id":1},
    {"cuisines.cuisine_id":1}
  ]
},{restaurant_name:1,mealTypes:1,cuisines:1,_id:0}).pretty()

db.restaurants.find({
  $or:[
    {"mealTypes.mealtype_id":1},
    {"cuisines.cuisine_id":1}
  ]
},{restaurant_name:1,mealTypes:1,cuisines:1,_id:0}).pretty()

db.restaurants.find({"mealTypes.mealtype_id":{$in:[4,1,2]}}).pretty()

db.restaurants.find({cost:{$lt:500}},{restaurant_name:1,cost:1,_id:0}).pretty()


db.restaurants.find({cost:{$gt:500}},{restaurant_name:1,cost:1,_id:0}).pretty()

db.restaurants.find({cost:{$gt:500,$lt:1000}},{restaurant_name:1,cost:1,_id:0}).pretty()


// Aggeration
> $match
> $project
> $group
> $sort
> $skip
> $limit
> $unwind
> $out

db.orders.insert([ 
  { "_id" : 1, "item" : "almonds", "price" : 12, "quantity" : 2 }, 
  { "_id" : 2, "item" : "pecans", "price" : 20, "quantity" : 1 }, 
  { "_id" : 3 } 
])

db.inventory.insert([ 
  { "_id" : 1, "sku" : "almonds", description: "product 1", "instock" : 120 }, 
  { "_id" : 2, "sku" : "bread", description: "product 2", "instock" : 80 }, 
  { "_id" : 3, "sku" : "cashews", description: "product 3", "instock" : 60 }, 
  { "_id" : 4, "sku" : "pecans", description: "product 4", "instock" : 70 }, 
  { "_id" : 5, "sku": null, description: "Incomplete" }, 
  { "_id" : 6 } 
])


db.orders.aggregate([
  {
    $lookup:{
      from:'inventory',
      localField:'item',
      foreignField:'sku',
      as:'combine_data'
    }
  }
])